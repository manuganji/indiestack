/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type menu_type = 'footer' | 'header' | 'sidebar';
  export namespace every {
    export type menu_type = ['footer', 'header', 'sidebar'];
  }

  /* --- tables --- */

  /**
   * **accounts**
   * - Table in database
   */
  export namespace accounts {
    export type Table = 'accounts';
    export interface Selectable {
      /**
      * **accounts.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **accounts.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **accounts.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **accounts.provider**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider: string;
      /**
      * **accounts.type**
      * - `text` in database
      * - Nullable, no default
      */
      type: string | null;
      /**
      * **accounts.provider_account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_account_id: string;
      /**
      * **accounts.refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      refresh_token: string | null;
      /**
      * **accounts.access_token**
      * - `text` in database
      * - Nullable, no default
      */
      access_token: string | null;
      /**
      * **accounts.expires_at**
      * - `int4` in database
      * - Nullable, no default
      */
      expires_at: number | null;
      /**
      * **accounts.token_type**
      * - `text` in database
      * - Nullable, no default
      */
      token_type: string | null;
      /**
      * **accounts.scope**
      * - `text` in database
      * - Nullable, no default
      */
      scope: string | null;
      /**
      * **accounts.id_token**
      * - `text` in database
      * - Nullable, no default
      */
      id_token: string | null;
      /**
      * **accounts.session_state**
      * - `text` in database
      * - Nullable, no default
      */
      session_state: string | null;
    }
    export interface JSONSelectable {
      /**
      * **accounts.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **accounts.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **accounts.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **accounts.provider**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider: string;
      /**
      * **accounts.type**
      * - `text` in database
      * - Nullable, no default
      */
      type: string | null;
      /**
      * **accounts.provider_account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_account_id: string;
      /**
      * **accounts.refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      refresh_token: string | null;
      /**
      * **accounts.access_token**
      * - `text` in database
      * - Nullable, no default
      */
      access_token: string | null;
      /**
      * **accounts.expires_at**
      * - `int4` in database
      * - Nullable, no default
      */
      expires_at: number | null;
      /**
      * **accounts.token_type**
      * - `text` in database
      * - Nullable, no default
      */
      token_type: string | null;
      /**
      * **accounts.scope**
      * - `text` in database
      * - Nullable, no default
      */
      scope: string | null;
      /**
      * **accounts.id_token**
      * - `text` in database
      * - Nullable, no default
      */
      id_token: string | null;
      /**
      * **accounts.session_state**
      * - `text` in database
      * - Nullable, no default
      */
      session_state: string | null;
    }
    export interface Whereable {
      /**
      * **accounts.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.provider**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.type**
      * - `text` in database
      * - Nullable, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.provider_account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_account_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      refresh_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.access_token**
      * - `text` in database
      * - Nullable, no default
      */
      access_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.expires_at**
      * - `int4` in database
      * - Nullable, no default
      */
      expires_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.token_type**
      * - `text` in database
      * - Nullable, no default
      */
      token_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.scope**
      * - `text` in database
      * - Nullable, no default
      */
      scope?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.id_token**
      * - `text` in database
      * - Nullable, no default
      */
      id_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **accounts.session_state**
      * - `text` in database
      * - Nullable, no default
      */
      session_state?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **accounts.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **accounts.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **accounts.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **accounts.provider**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **accounts.type**
      * - `text` in database
      * - Nullable, no default
      */
      type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **accounts.provider_account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_account_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **accounts.refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      refresh_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **accounts.access_token**
      * - `text` in database
      * - Nullable, no default
      */
      access_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **accounts.expires_at**
      * - `int4` in database
      * - Nullable, no default
      */
      expires_at?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **accounts.token_type**
      * - `text` in database
      * - Nullable, no default
      */
      token_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **accounts.scope**
      * - `text` in database
      * - Nullable, no default
      */
      scope?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **accounts.id_token**
      * - `text` in database
      * - Nullable, no default
      */
      id_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **accounts.session_state**
      * - `text` in database
      * - Nullable, no default
      */
      session_state?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **accounts.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **accounts.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **accounts.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **accounts.provider**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **accounts.type**
      * - `text` in database
      * - Nullable, no default
      */
      type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **accounts.provider_account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      provider_account_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **accounts.refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      refresh_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **accounts.access_token**
      * - `text` in database
      * - Nullable, no default
      */
      access_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **accounts.expires_at**
      * - `int4` in database
      * - Nullable, no default
      */
      expires_at?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **accounts.token_type**
      * - `text` in database
      * - Nullable, no default
      */
      token_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **accounts.scope**
      * - `text` in database
      * - Nullable, no default
      */
      scope?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **accounts.id_token**
      * - `text` in database
      * - Nullable, no default
      */
      id_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **accounts.session_state**
      * - `text` in database
      * - Nullable, no default
      */
      session_state?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'accounts_id_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **block_list**
   * - Table in database
   */
  export namespace block_list {
    export type Table = 'block_list';
    export interface Selectable {
      /**
      * **block_list.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **block_list.email**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **block_list.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **block_list.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **block_list.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **block_list.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **block_list.email**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **block_list.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **block_list.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **block_list.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **block_list.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block_list.email**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block_list.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block_list.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block_list.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **block_list.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **block_list.email**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **block_list.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **block_list.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **block_list.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **block_list.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **block_list.email**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **block_list.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **block_list.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **block_list.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'block_list_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **menus**
   * - Table in database
   */
  export namespace menus {
    export type Table = 'menus';
    export interface Selectable {
      /**
      * **menus.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **menus.path**
      * - `ltree` in database
      * - `NOT NULL`, default: `''::ltree`
      */
      path: c.PgLtree;
      /**
      * **menus.authenticated**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      authenticated: boolean;
      /**
      * **menus.type**
      * - `menu_type` in database
      * - `NOT NULL`, no default
      */
      type: menu_type;
      /**
      * **menus.items**
      * - `menu_items` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      items: c.PgMenuItems;
    }
    export interface JSONSelectable {
      /**
      * **menus.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **menus.path**
      * - `ltree` in database
      * - `NOT NULL`, default: `''::ltree`
      */
      path: c.PgLtree;
      /**
      * **menus.authenticated**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      authenticated: boolean;
      /**
      * **menus.type**
      * - `menu_type` in database
      * - `NOT NULL`, no default
      */
      type: menu_type;
      /**
      * **menus.items**
      * - `menu_items` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      items: c.PgMenuItems;
    }
    export interface Whereable {
      /**
      * **menus.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus.path**
      * - `ltree` in database
      * - `NOT NULL`, default: `''::ltree`
      */
      path?: c.PgLtree | db.Parameter<c.PgLtree> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLtree | db.Parameter<c.PgLtree> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus.authenticated**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      authenticated?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus.type**
      * - `menu_type` in database
      * - `NOT NULL`, no default
      */
      type?: menu_type | db.Parameter<menu_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, menu_type | db.Parameter<menu_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus.items**
      * - `menu_items` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      items?: c.PgMenuItems | db.Parameter<c.PgMenuItems> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMenuItems | db.Parameter<c.PgMenuItems> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **menus.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **menus.path**
      * - `ltree` in database
      * - `NOT NULL`, default: `''::ltree`
      */
      path?: c.PgLtree | db.Parameter<c.PgLtree> | db.DefaultType | db.SQLFragment;
      /**
      * **menus.authenticated**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      authenticated?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **menus.type**
      * - `menu_type` in database
      * - `NOT NULL`, no default
      */
      type: menu_type | db.Parameter<menu_type> | db.SQLFragment;
      /**
      * **menus.items**
      * - `menu_items` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      items?: c.PgMenuItems | db.Parameter<c.PgMenuItems> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **menus.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **menus.path**
      * - `ltree` in database
      * - `NOT NULL`, default: `''::ltree`
      */
      path?: c.PgLtree | db.Parameter<c.PgLtree> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgLtree | db.Parameter<c.PgLtree> | db.DefaultType | db.SQLFragment>;
      /**
      * **menus.authenticated**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      authenticated?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **menus.type**
      * - `menu_type` in database
      * - `NOT NULL`, no default
      */
      type?: menu_type | db.Parameter<menu_type> | db.SQLFragment | db.SQLFragment<any, menu_type | db.Parameter<menu_type> | db.SQLFragment>;
      /**
      * **menus.items**
      * - `menu_items` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      items?: c.PgMenuItems | db.Parameter<c.PgMenuItems> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgMenuItems | db.Parameter<c.PgMenuItems> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'menus_path_type_auth_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pgmigrations**
   * - Table in database
   */
  export namespace pgmigrations {
    export type Table = 'pgmigrations';
    export interface Selectable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: Date;
    }
    export interface JSONSelectable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pgmigrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **properties**
   * - Table in database
   */
  export namespace properties {
    export type Table = 'properties';
    export interface Selectable {
      /**
      * **properties.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **properties.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **properties.domain**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **properties.settings**
      * - `property_settings` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      settings: c.PgPropertySettings | null;
    }
    export interface JSONSelectable {
      /**
      * **properties.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **properties.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **properties.domain**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **properties.settings**
      * - `property_settings` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      settings: c.PgPropertySettings | null;
    }
    export interface Whereable {
      /**
      * **properties.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **properties.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **properties.domain**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **properties.settings**
      * - `property_settings` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      settings?: c.PgPropertySettings | db.Parameter<c.PgPropertySettings> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgPropertySettings | db.Parameter<c.PgPropertySettings> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **properties.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **properties.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **properties.domain**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **properties.settings**
      * - `property_settings` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      settings?: c.PgPropertySettings | db.Parameter<c.PgPropertySettings> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **properties.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **properties.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **properties.domain**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **properties.settings**
      * - `property_settings` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      settings?: c.PgPropertySettings | db.Parameter<c.PgPropertySettings> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgPropertySettings | db.Parameter<c.PgPropertySettings> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'properties_domain_key' | 'properties_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **sessions**
   * - Table in database
   */
  export namespace sessions {
    export type Table = 'sessions';
    export interface Selectable {
      /**
      * **sessions.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **sessions.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **sessions.expires**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires: Date;
      /**
      * **sessions.session_token**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      session_token: string;
    }
    export interface JSONSelectable {
      /**
      * **sessions.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **sessions.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **sessions.expires**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires: db.TimestampTzString;
      /**
      * **sessions.session_token**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      session_token: string;
    }
    export interface Whereable {
      /**
      * **sessions.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessions.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessions.expires**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessions.session_token**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      session_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **sessions.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **sessions.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **sessions.expires**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **sessions.session_token**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      session_token?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **sessions.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **sessions.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **sessions.expires**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **sessions.session_token**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      session_token?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'sessions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **users**
   * - Table in database
   */
  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **users.welcomed**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      welcomed: boolean | null;
      /**
      * **users.is_admin**
      * - `bool` in database
      * - Nullable, no default
      */
      is_admin: boolean | null;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **users.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string;
      /**
      * **users.last_name**
      * - `text` in database
      * - Nullable, no default
      */
      last_name: string | null;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **users.email_verified**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      email_verified: Date | null;
      /**
      * **users.image**
      * - `text` in database
      * - Nullable, no default
      */
      image: string | null;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **users.last_logged_in**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      last_logged_in: Date;
    }
    export interface JSONSelectable {
      /**
      * **users.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **users.welcomed**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      welcomed: boolean | null;
      /**
      * **users.is_admin**
      * - `bool` in database
      * - Nullable, no default
      */
      is_admin: boolean | null;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **users.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string;
      /**
      * **users.last_name**
      * - `text` in database
      * - Nullable, no default
      */
      last_name: string | null;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **users.email_verified**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      email_verified: db.TimestampTzString | null;
      /**
      * **users.image**
      * - `text` in database
      * - Nullable, no default
      */
      image: string | null;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **users.last_logged_in**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      last_logged_in: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **users.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.welcomed**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      welcomed?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.is_admin**
      * - `bool` in database
      * - Nullable, no default
      */
      is_admin?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.last_name**
      * - `text` in database
      * - Nullable, no default
      */
      last_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.email_verified**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      email_verified?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.image**
      * - `text` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.last_logged_in**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      last_logged_in?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.welcomed**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      welcomed?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.is_admin**
      * - `bool` in database
      * - Nullable, no default
      */
      is_admin?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **users.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.last_name**
      * - `text` in database
      * - Nullable, no default
      */
      last_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.email_verified**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      email_verified?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.image**
      * - `text` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **users.last_logged_in**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      last_logged_in?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.welcomed**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      welcomed?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.is_admin**
      * - `bool` in database
      * - Nullable, no default
      */
      is_admin?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.last_name**
      * - `text` in database
      * - Nullable, no default
      */
      last_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.email_verified**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      email_verified?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.image**
      * - `text` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.last_logged_in**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      last_logged_in?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_email_unique' | 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **verification_tokens**
   * - Table in database
   */
  export namespace verification_tokens {
    export type Table = 'verification_tokens';
    export interface Selectable {
      /**
      * **verification_tokens.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **verification_tokens.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **verification_tokens.token**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      token: string;
      /**
      * **verification_tokens.expires**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires: Date;
    }
    export interface JSONSelectable {
      /**
      * **verification_tokens.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string;
      /**
      * **verification_tokens.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **verification_tokens.token**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      token: string;
      /**
      * **verification_tokens.expires**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **verification_tokens.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **verification_tokens.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **verification_tokens.token**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **verification_tokens.expires**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **verification_tokens.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **verification_tokens.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **verification_tokens.token**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      token?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **verification_tokens.expires**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **verification_tokens.property**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      property?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **verification_tokens.identifier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **verification_tokens.token**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      token?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **verification_tokens.expires**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      expires?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = accounts.Table | block_list.Table | menus.Table | pgmigrations.Table | properties.Table | sessions.Table | users.Table | verification_tokens.Table;
    export type Selectable = accounts.Selectable | block_list.Selectable | menus.Selectable | pgmigrations.Selectable | properties.Selectable | sessions.Selectable | users.Selectable | verification_tokens.Selectable;
    export type JSONSelectable = accounts.JSONSelectable | block_list.JSONSelectable | menus.JSONSelectable | pgmigrations.JSONSelectable | properties.JSONSelectable | sessions.JSONSelectable | users.JSONSelectable | verification_tokens.JSONSelectable;
    export type Whereable = accounts.Whereable | block_list.Whereable | menus.Whereable | pgmigrations.Whereable | properties.Whereable | sessions.Whereable | users.Whereable | verification_tokens.Whereable;
    export type Insertable = accounts.Insertable | block_list.Insertable | menus.Insertable | pgmigrations.Insertable | properties.Insertable | sessions.Insertable | users.Insertable | verification_tokens.Insertable;
    export type Updatable = accounts.Updatable | block_list.Updatable | menus.Updatable | pgmigrations.Updatable | properties.Updatable | sessions.Updatable | users.Updatable | verification_tokens.Updatable;
    export type UniqueIndex = accounts.UniqueIndex | block_list.UniqueIndex | menus.UniqueIndex | pgmigrations.UniqueIndex | properties.UniqueIndex | sessions.UniqueIndex | users.UniqueIndex | verification_tokens.UniqueIndex;
    export type Column = accounts.Column | block_list.Column | menus.Column | pgmigrations.Column | properties.Column | sessions.Column | users.Column | verification_tokens.Column;
  
    export type AllBaseTables = [accounts.Table, block_list.Table, menus.Table, pgmigrations.Table, properties.Table, sessions.Table, users.Table, verification_tokens.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [accounts.Table, block_list.Table, menus.Table, pgmigrations.Table, properties.Table, sessions.Table, users.Table, verification_tokens.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "accounts": accounts.Selectable;
    "block_list": block_list.Selectable;
    "menus": menus.Selectable;
    "pgmigrations": pgmigrations.Selectable;
    "properties": properties.Selectable;
    "sessions": sessions.Selectable;
    "users": users.Selectable;
    "verification_tokens": verification_tokens.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "accounts": accounts.JSONSelectable;
    "block_list": block_list.JSONSelectable;
    "menus": menus.JSONSelectable;
    "pgmigrations": pgmigrations.JSONSelectable;
    "properties": properties.JSONSelectable;
    "sessions": sessions.JSONSelectable;
    "users": users.JSONSelectable;
    "verification_tokens": verification_tokens.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "accounts": accounts.Whereable;
    "block_list": block_list.Whereable;
    "menus": menus.Whereable;
    "pgmigrations": pgmigrations.Whereable;
    "properties": properties.Whereable;
    "sessions": sessions.Whereable;
    "users": users.Whereable;
    "verification_tokens": verification_tokens.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "accounts": accounts.Insertable;
    "block_list": block_list.Insertable;
    "menus": menus.Insertable;
    "pgmigrations": pgmigrations.Insertable;
    "properties": properties.Insertable;
    "sessions": sessions.Insertable;
    "users": users.Insertable;
    "verification_tokens": verification_tokens.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "accounts": accounts.Updatable;
    "block_list": block_list.Updatable;
    "menus": menus.Updatable;
    "pgmigrations": pgmigrations.Updatable;
    "properties": properties.Updatable;
    "sessions": sessions.Updatable;
    "users": users.Updatable;
    "verification_tokens": verification_tokens.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "accounts": accounts.UniqueIndex;
    "block_list": block_list.UniqueIndex;
    "menus": menus.UniqueIndex;
    "pgmigrations": pgmigrations.UniqueIndex;
    "properties": properties.UniqueIndex;
    "sessions": sessions.UniqueIndex;
    "users": users.UniqueIndex;
    "verification_tokens": verification_tokens.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "accounts": accounts.Column;
    "block_list": block_list.Column;
    "menus": menus.Column;
    "pgmigrations": pgmigrations.Column;
    "properties": properties.Column;
    "sessions": sessions.Column;
    "users": users.Column;
    "verification_tokens": verification_tokens.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "accounts": accounts.SQL;
    "block_list": block_list.SQL;
    "menus": menus.SQL;
    "pgmigrations": pgmigrations.SQL;
    "properties": properties.SQL;
    "sessions": sessions.SQL;
    "users": users.SQL;
    "verification_tokens": verification_tokens.SQL;
  }[T];

}
